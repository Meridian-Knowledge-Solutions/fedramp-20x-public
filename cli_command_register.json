{
  "KSI-CNA-01": {
    "description": "Implement DDoS protection and defense-in-depth network security",
    "justification": "Validates comprehensive DDoS protection and network security from basic security groups to enterprise-grade WAF, CloudFront, and defense-in-depth architecture",
    "cli_commands": [
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Check security group configurations for defense-in-depth network controls"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Validate network ACLs for additional layer of network security"
      },
      {
        "command": "aws ec2 describe-route-tables --output json",
        "note": "Check routing configurations for network segmentation and isolation"
      },
      {
        "command": "aws ec2 describe-nat-gateways --output json",
        "note": "Validate NAT gateway configurations for secure outbound connectivity"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Check VPC endpoints for private AWS service connectivity"
      },
      {
        "command": "aws wafv2 list-web-acls --scope REGIONAL --output json",
        "note": "Validate WAF configurations for application-layer DDoS protection"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Check load balancer configurations for traffic distribution and DDoS resilience"
      },
      {
        "command": "aws logs describe-log-groups --log-group-name-prefix '/aws/vpc/' --output json",
        "note": "Validate VPC Flow Logs for network traffic monitoring and DDoS detection"
      }
    ]
  },
  "KSI-CNA-02": {
    "description": "Segment network and compute resources into security zones",
    "justification": "Validates comprehensive network segmentation from basic VPC subnets to enterprise-grade multi-tier architecture with strict isolation",
    "cli_commands": [
      {
        "command": "aws ec2 describe-subnets --output json",
        "note": "Check subnet configurations for network segmentation and security zones"
      },
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Validate security group rules for zone-based access control"
      },
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Check EC2 instance placements across security zones"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Validate network ACLs for zone-level traffic control"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Check load balancer configurations for zone-aware traffic distribution"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate Lambda function network configurations and VPC integration"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS instance placements in private subnets and security zones"
      }
    ]
  },
  "KSI-CNA-03": {
    "description": "Restrict public network accessibility except through a limited number of managed access points",
    "justification": "Validates strict public access control from basic public subnet restrictions to enterprise-grade private connectivity with minimal internet exposure",
    "cli_commands": [
      {
        "command": "aws ec2 describe-route-tables --output json",
        "note": "Check routing tables for public internet gateway associations"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Validate network ACLs for public access restrictions"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Check VPC endpoints for private AWS service connectivity without internet"
      },
      {
        "command": "aws ec2 describe-transit-gateways --output json",
        "note": "Validate transit gateway configurations for private inter-VPC connectivity"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Check load balancer schemes (internal vs internet-facing) as managed access points"
      },
      {
        "command": "aws ec2 describe-nat-gateways --output json",
        "note": "Validate NAT gateways as controlled egress points for private resources"
      },
      {
        "command": "aws logs describe-log-groups --log-group-name-prefix '/aws/vpc/' --output json",
        "note": "Check VPC Flow Logs for monitoring public access patterns"
      }
    ]
  },
  "KSI-CNA-04": {
    "description": "Use immutable infrastructure with strictly defined functionality and privileges",
    "justification": "Validates a hybrid infrastructure model by checking for serverless adoption, EC2 immutability patterns, least privilege violations (for both users and roles), and network security.",
    "cli_commands": [
      {
        "command": "aws ec2 describe-instances --filters 'Name=instance-state-name,Values=running' --output json",
        "note": "Check running instances for IaC management tags and age."
      },
      {
        "command": "aws ec2 describe-launch-templates --output json",
        "note": "Validate if EC2 instances are standardized via Launch Templates."
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Check if EC2 instances use Auto Scaling for immutable scaling."
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate adoption of inherently immutable serverless functions."
      },
      {
        "command": "aws s3api list-buckets --query 'Buckets[?contains(Name, `terraform`) || contains(Name, `cloudformation`)].Name' --output json",
        "note": "Check for foundational IaC state storage."
      },
      {
        "command": "aws dynamodb list-tables --query 'TableNames[?contains(@, `terraform`) || contains(@, `state`)]' --output json",
        "note": "Check for foundational IaC state locking."
      },
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Provide full security group data to check for exposed sensitive ports."
      },
      {
        "command": "aws iam list-entities-for-policy --policy-arn arn:aws:iam::aws:policy/AdministratorAccess --output json",
        "note": "CRITICAL: Check for any users or non-standard roles with AdministratorAccess."
      }
    ]
  },
  "KSI-CNA-05": {
  "description": "Protect against denial of service attacks and unwanted spam",
  "justification": "Validates DDoS protection through WAF, Shield, Multi-AZ architecture, and DNS security. Email spam protection validated only when email services are detected (SES, MX records)",
  "cli_commands": [
    {
      "command": "aws wafv2 list-web-acls --scope REGIONAL --output json",
      "note": "Check Regional WAF for Layer 7 DDoS protection"
    },
    {
      "command": "aws wafv2 list-web-acls --scope CLOUDFRONT --region us-east-1 --output json",
      "note": "Validate CloudFront WAF for edge DDoS protection"
    },
    {
      "command": "aws cloudfront list-distributions --output json",
      "note": "Check CloudFront distributions for global DDoS mitigation"
    },
    {
      "command": "aws elbv2 describe-load-balancers --output json",
      "note": "Validate Multi-AZ load balancers for service resilience"
    },
    {
      "command": "aws autoscaling describe-auto-scaling-groups --output json",
      "note": "Check auto-scaling for capacity-based DDoS mitigation"
    },
    {
      "command": "aws route53 list-hosted-zones --output json",
      "note": "Validate Route 53 hosted zones for DNS DDoS protection"
    },
    {
      "command": "aws cloudwatch describe-alarms --output json",
      "note": "Check CloudWatch alarms for DDoS detection and alerting"
    },
    {
      "command": "aws route53 list-resource-record-sets --hosted-zone-id $(aws route53 list-hosted-zones --query 'HostedZones[0].Id' --output text | cut -d'/' -f3) --max-items 50 --output json || echo '{\"ResourceRecordSets\": []}'",
      "note": "Check DNS records for email authentication (SPF/DMARC/DKIM)"
    },
    {
      "command": "aws sesv2 list-email-identities --output json || echo '{\"EmailIdentities\": []}'",
      "note": "Detect email services to determine spam protection applicability"
    }
    ]
  },
  "KSI-CNA-06": {
    "description": "Deploy highly available components and services",
    "justification": "Validates comprehensive high availability from basic multi-AZ to enterprise-grade disaster recovery and global resilience",
    "cli_commands": [
      {
        "command": "aws ec2 describe-subnets --output json",
        "note": "Check subnet distribution across multiple availability zones"
      },
      {
        "command": "aws ec2 describe-availability-zones --output json",
        "note": "Validate availability zone utilization for redundancy"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS Multi-AZ deployments and read replicas for database HA"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Validate load balancer configurations across multiple AZs"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Check auto-scaling configurations for multi-AZ distribution"
      },
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Validate AWS Backup plans for automated HA recovery"
      },
      {
        "command": "aws ec2 describe-snapshots --owner-ids self --output json",
        "note": "Check EBS snapshot policies for data resilience"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Validate S3 configurations for cross-region replication"
      },
      {
        "command": "aws route53 list-hosted-zones --output json",
        "note": "Check Route53 health checks and DNS failover for service HA"
      }
    ]
  },
  "KSI-CNA-07": {
    "description": "Maximize use of managed services and cloud resources",
    "justification": "Validates comprehensive cloud-native architecture from basic managed services to enterprise-grade serverless and fully managed infrastructure",
    "cli_commands": [
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Check AWS Config rules for managed service compliance monitoring"
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate CloudTrail managed service for audit logging"
      },
      {
        "command": "aws cloudtrail get-trail-status --name $(aws cloudtrail describe-trails --query 'trailList[0].Name' --output text) --output json || echo '{\"IsLogging\": false}'",
        "note": "Check active CloudTrail logging status"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Validate AWS KMS managed encryption service usage"
      },
      {
        "command": "aws iam get-account-summary --output json",
        "note": "Check IAM managed identity service utilization"
      },
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Analyze EC2 usage vs serverless alternatives"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Validate managed load balancing service usage"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Check managed auto-scaling service configurations"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Validate S3 managed storage service usage"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch managed monitoring service"
      },
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Validate AWS Backup managed service for data protection"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check AWS Organizations managed service for account governance"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate serverless Lambda managed compute service usage"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS managed database service usage"
      },
      {
        "command": "aws apigateway get-rest-apis --output json",
        "note": "Validate API Gateway managed API service usage"
      }
    ]
  },
   "KSI-CNA-08": {
    "description": "Use automated services to persistently assess and enforce secure operations",
    "justification": "Validates a multi-layered automation strategy, including persistent assessment (Security Hub, Config) and automated enforcement (SSM Associations, custom Lambda functions).",
    "cli_commands": [
      {
        "command": "aws securityhub get-enabled-standards --output json",
        "note": "Validates the foundational framework for persistent assessment."
      },
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Measures the breadth of persistent security assessment."
      },
      {
        "command": "aws configservice describe-configuration-recorder-status --output json",
        "note": "Verifies that assessment data is actively being recorded."
      },
      {
        "command": "aws ssm list-associations --output json || echo '{\"Associations\": []}'",
        "note": "Validates automated enforcement via SSM State Manager associations."
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Identifies custom, event-driven enforcement capabilities via Lambda."
      }
    ]
  },
  "KSI-SVC-01": {
    "description": "Maintain hardened system images and configurations",
    "justification": "Validates comprehensive system hardening from basic security groups to enterprise-grade patch management and automated configuration enforcement",
    "cli_commands": [
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Check security group configurations for system hardening"
      },
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Validate EC2 instances using hardened AMIs and configurations"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Check SSM agent deployment for configuration management"
      },
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Validate patch baselines for automated security updates"
      },
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Check Config rules for continuous hardening compliance"
      },
      {
        "command": "aws ec2 describe-network-acls --output json",
        "note": "Validate network ACLs for defense-in-depth hardening"
      },
      {
        "command": "aws guardduty list-detectors --output json",
        "note": "Check GuardDuty for threat detection on hardened systems"
      },
      {
        "command": "aws wafv2 list-web-acls --scope REGIONAL --output json",
        "note": "Validate WAF rules for application-layer hardening"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Check Inspector for vulnerability scanning of system images"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide hardening policies and SCPs"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Check VPC endpoints for private connectivity and reduced attack surface"
      }
    ]
  },
  "KSI-SVC-02": {
    "description": "Use encryption in transit with TLS 1.2 or higher",
    "justification": "Validates comprehensive encryption in transit from basic TLS to enterprise-grade certificate management and cryptographic compliance",
    "cli_commands": [
      {
        "command": "for arn in $(aws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text); do aws elbv2 describe-listeners --load-balancer-arn $arn --output json; done",
        "note": "Check load balancer listeners for TLS 1.2+ enforcement"
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Validate VPC endpoints using encrypted connections"
      },
      {
        "command": "aws cloudfront list-distributions --output json",
        "note": "Check CloudFront distributions for TLS 1.2+ minimum protocol"
      },
      {
        "command": "aws apigateway get-rest-apis --output json",
        "note": "Validate API Gateway TLS configurations"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS instances for SSL/TLS enforcement"
      },
      {
        "command": "aws elasticache describe-cache-clusters --output json",
        "note": "Validate ElastiCache encryption in transit"
      },
      {
        "command": "aws acm list-certificates --output json",
        "note": "Check ACM certificates for TLS 1.2+ support and validity"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide encryption in transit policies"
      }
    ]
  },
  "KSI-SVC-03": {
    "description": "Encrypt data at rest",
    "justification": "Validates comprehensive data at rest encryption from basic S3 encryption to enterprise-grade KMS key management and compliance",
    "cli_commands": [
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Check S3 buckets for default encryption configurations"
      },
      {
        "command": "aws ec2 describe-volumes --output json",
        "note": "Validate EBS volume encryption at rest"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS database encryption at rest"
      },
      {
        "command": "aws rds describe-db-snapshots --output json",
        "note": "Validate RDS snapshot encryption"
      },
      {
        "command": "aws dynamodb list-tables --output json",
        "note": "Check DynamoDB tables for encryption at rest"
      },
      {
        "command": "aws elasticache describe-cache-clusters --output json",
        "note": "Validate ElastiCache encryption at rest"
      },
      {
        "command": "aws redshift describe-clusters --output json",
        "note": "Check Redshift cluster encryption"
      },
      {
        "command": "aws backup list-backup-vaults --output json",
        "note": "Validate AWS Backup vault encryption"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Check KMS key usage for data encryption"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide encryption at rest policies"
      }
    ]
  },
  "KSI-SVC-04": {
    "description": "Use configuration management systems to manage cloud services and apply configuration as code to CSO-provided cloud services",
    "justification": "Validates comprehensive configuration management from basic CloudFormation to enterprise-grade GitOps, policy enforcement, and automated compliance",
    "cli_commands": [
      {
        "command": "aws ssm describe-parameters --output json",
        "note": "Check SSM Parameter Store for centralized configuration management"
      },
      {
        "command": "aws configservice describe-configuration-recorders --output json",
        "note": "Validate AWS Config for configuration tracking and compliance"
      },
      {
        "command": "aws ssm list-documents --document-filter-list key=DocumentType,value=Automation --output json",
        "note": "Check SSM automation documents for configuration as code"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Validate CloudFormation stacks for infrastructure as code"
      },
      {
        "command": "aws secretsmanager list-secrets --output json",
        "note": "Check Secrets Manager for secure configuration storage"
      },
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Validate patch baselines for configuration standardization"
      },
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Check Config rules for automated configuration compliance"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate SSM agent deployment for configuration management"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Check Service Catalog for standardized service configurations"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide configuration management policies"
      }
    ]
  },
  "KSI-SVC-05": {
    "description": "Use logging and monitoring to detect abnormal changes to configuration",
    "justification": "Validates comprehensive configuration monitoring from basic CloudTrail to enterprise-grade automated detection and response",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Check CloudTrail for configuration change audit logging"
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Validate KMS encryption for secure log storage"
      },
      {
        "command": "aws kms list-aliases --output json",
        "note": "Check KMS key aliases for log encryption management"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Validate S3 buckets for CloudTrail log storage"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS configuration change logging"
      },
      {
        "command": "aws configservice describe-configuration-recorders --output json",
        "note": "Validate Config recorders for continuous configuration monitoring"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for configuration change alerts"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Validate SNS topics for configuration change notifications"
      },
      {
        "command": "aws backup list-backup-vaults --output json",
        "note": "Check backup configurations for disaster recovery"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide configuration monitoring policies"
      }
    ]
  },
  "KSI-SVC-06": {
    "description": "Use centralized key management services",
    "justification": "Validates comprehensive key management from basic KMS to enterprise-grade certificate lifecycle, rotation, and cryptographic compliance",
    "cli_commands": [
      {
        "command": "aws kms list-keys --output json",
        "note": "Check KMS keys for centralized encryption key management"
      },
      {
        "command": "aws acm list-certificates --output json",
        "note": "Validate ACM certificates for centralized certificate management"
      },
      {
        "command": "aws kms list-aliases --output json",
        "note": "Check KMS key aliases for key organization and management"
      },
      {
        "command": "aws ssm describe-parameters --parameter-filters Key=Type,Values=SecureString --output json",
        "note": "Validate SSM SecureString parameters using KMS encryption"
      },
      {
        "command": "aws secretsmanager list-secrets --output json",
        "note": "Check Secrets Manager for KMS-encrypted secret storage"
      },
      {
        "command": "aws iam list-server-certificates --output json",
        "note": "Validate IAM server certificates and migration to ACM"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Check CloudFormation for infrastructure as code key management"
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=ResourceType,AttributeValue=AWS::KMS::Key --max-items 20 --output json",
        "note": "Validate CloudTrail audit logs for key usage and management"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check organization-wide centralized key management policies"
      }
    ]
  },
  "KSI-SVC-07": {
    "description": "Perform regularly scheduled scans for vulnerabilities and apply patches promptly",
    "justification": "Validates comprehensive vulnerability management from basic patch baselines to enterprise-grade automated scanning, remediation, and compliance",
    "cli_commands": [
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Check SSM patch baselines for vulnerability management"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate SSM managed instances for patch compliance"
      },
      {
        "command": "aws ssm describe-patch-groups --output json",
        "note": "Check patch groups for organized vulnerability remediation"
      },
      {
        "command": "aws ssm list-documents --document-filter-list key=DocumentType,value=Automation --output json",
        "note": "Validate SSM automation for scheduled patch deployment"
      },
      {
        "command": "aws ssm describe-maintenance-windows --output json",
        "note": "Check maintenance windows for scheduled patching operations"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Validate Inspector for continuous vulnerability scanning"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Check ECR repositories for container image vulnerability scanning"
      },
      {
        "command": "aws lambda list-layers --output json",
        "note": "Validate Lambda layers for serverless vulnerability management"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check organization-wide vulnerability management policies"
      }
    ]
  },
  "KSI-SVC-08": {
    "description": "Use infrastructure as code to apply controls to the provisioning and management of resources",
    "justification": "Validates a comprehensive IaC strategy by confirming the use of CloudFormation for deployments and AWS Config for tracking resource changes and detecting residual elements.",
    "cli_commands": [
      {
        "command": "aws cloudformation list-stacks --output json",
        "note": "Check for active CloudFormation stacks as primary evidence of IaC."
      },
      {
        "command": "aws configservice describe-configuration-recorders --output json",
        "note": "Verify that AWS Config is active for tracking changes and detecting residual elements."
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check for custom Lambda functions that support IaC or cleanup automation."
      }
    ]
  },
  "KSI-SVC-09": {
    "description": "Use TLS 1.2 or higher versions of secure protocols",
    "justification": "Validates the end-to-end use of modern, secure communication protocols (TLS 1.2+) across the infrastructure.",
    "cli_commands": [
      {
        "command": "aws acm list-certificates --output json",
        "note": "Check for valid, in-use ACM certificates."
      },
      {
        "command": "aws elbv2 describe-ssl-policies --output json",
        "note": "Get all available SSL policies for reference."
      },
      {
        "command": "for arn in $(aws elbv2 describe-load-balancers --query 'LoadBalancers[].LoadBalancerArn' --output text); do aws elbv2 describe-listeners --load-balancer-arn $arn --output json; done",
        "note": "CRITICAL: Check the SSL policies actively used by load balancer listeners."
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Verify that internal traffic uses secure, private endpoints."
      },
      {
        "command": "aws cloudwatch describe-alarms --query 'MetricAlarms[?contains(AlarmDescription, `Certificate`) || contains(AlarmName, `SSL`)]' --output json",
        "note": "Check for specific alarms that monitor certificate expiry or TLS issues."
      },
      {
        "command": "aws lambda list-functions --query 'Functions[?contains(FunctionName, `cert`) || contains(FunctionName, `ssl`)]' --output json",
        "note": "Look for Lambda functions related to certificate rotation or lifecycle management."
      }
    ]
  },
  "KSI-SVC-10": {
    "description": "Perform regularly scheduled backups",
    "justification": "Validates that automated data lifecycle and retention policies are in place across AWS Backup, S3, and CloudWatch Logs.",
    "cli_commands": [
      {
        "command": "aws backup get-backup-plan --backup-plan-id $(aws backup list-backup-plans --query 'BackupPlansList[0].BackupPlanId' --output text) --output json || echo '{\"BackupPlan\": null}'",
        "note": "Validate that backup plans have defined retention and deletion lifecycles."
      },
      {
        "command": "for b in $(aws s3api list-buckets --query 'Buckets[].Name' --output text); do echo \"Bucket: $b\"; aws s3api get-bucket-lifecycle-configuration --bucket \"$b\" --output json 2>/dev/null || echo 'No lifecycle'; done",
        "note": "Check all S3 buckets for active lifecycle policies for data retention."
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Verify that CloudWatch Log groups have retention policies configured."
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Identify any custom Lambda functions used for automated data cleanup."
      }
    ]
  },
  "KSI-IAM-01": {
  "description": "Enforce phishing-resistant MFA for all user authentication",
  "justification": "Validates MFA via Identity Center and federation, while accurately identifying human IAM users by checking for console passwords before verifying their MFA status.",
  "cli_commands": [
    {
      "command": "aws iam list-users --output json",
      "note": "Get all traditional IAM users to analyze."
    },
    {
      "command": "aws sso-admin list-instances --output json",
      "note": "Verify that AWS Identity Center is the primary identity platform."
    },
    {
      "command": "aws identitystore list-users --identity-store-id d-9067ccc0ff --output json",
      "note": "Get Identity Center users to confirm federation."
    },
    {
      "command": "for user in $(aws iam list-users --query 'Users[].UserName' --output text); do aws iam get-login-profile --user-name \"$user\" --output json; done",
      "note": "NEW: Loop through each IAM user to check for a console password. Success indicates a human user."
    },
    {
      "command": "for user in $(aws iam list-users --query 'Users[].UserName' --output text); do echo \"User: $user\"; aws iam list-mfa-devices --user-name \"$user\" --output json; done",
      "note": "Loop through each IAM user to check for attached MFA devices."
    }
    ]
  },
  "KSI-IAM-02": {
    "description": "Implement enterprise-wide identity federation",
    "justification": "Validates comprehensive identity federation from basic SAML to enterprise-grade SSO and centralized identity management",
    "cli_commands": [
      {
        "command": "aws iam list-saml-providers --output json",
        "note": "Check SAML identity providers for federated authentication"
      },
      {
        "command": "aws iam list-virtual-mfa-devices --output json",
        "note": "Validate virtual MFA devices in federated authentication"
      },
      {
        "command": "aws iam get-account-password-policy --output json || echo '{\"PasswordPolicy\": \"NotConfigured\"}'",
        "note": "Check password policy for federated identity fallback requirements"
      },
      {
        "command": "aws sts get-caller-identity --output json",
        "note": "Validate federated identity assumption and role-based access"
      }
    ]
  },
 "KSI-IAM-03": {
  "description": "Implement least privilege access via role-based access control policies",
  "justification": "Fails immediately if any IAM user exists without a console password, as this indicates a service account using insecure, long-lived credentials. It then scores the account based on its adoption of IAM roles.",
  "cli_commands": [
    {
      "command": "aws iam list-roles --output json",
      "note": "Check for a strong foundation of IAM roles for service authentication."
    },
    {
      "command": "aws iam list-users --output json",
      "note": "Identify all traditional IAM users for analysis."
    },
    {
      "command": "aws ec2 describe-instances --query 'Reservations[*].Instances[*].IamInstanceProfile.Arn' --output json",
      "note": "Verify that all running EC2 instances are using IAM roles."
    },
    {
      "command": "for user in $(aws iam list-users --query 'Users[].UserName' --output text); do aws iam get-login-profile --user-name \"$user\" --output json; done",
      "note": "CRITICAL: Check for console passwords. A failure for any user indicates a service account, which is an anti-pattern."
    }
    ]
  },
   "KSI-IAM-04": {
    "description": "Clearly define user roles and implement user-to-role mapping",
    "justification": "Validates comprehensive user role mapping from basic IAM groups to enterprise-grade permission sets and centralized access management",
    "cli_commands": [
      {
        "command": "INSTANCE_ARN=$(aws sso-admin list-instances --query 'Instances[0].InstanceArn' --output text 2>/dev/null || echo 'none'); if [ \"$INSTANCE_ARN\" != \"none\" ]; then aws sso-admin list-permission-sets --instance-arn \"$INSTANCE_ARN\" --output json; else echo '{\"PermissionSets\": []}'; fi",
        "note": "Check SSO permission sets for role-based access mapping"
      },
      {
        "command": "aws iam list-roles --output json",
        "note": "Validate IAM roles with clear purpose and user mapping"
      },
      {
        "command": "aws iam list-users --output json",
        "note": "Check IAM users and their role assignments"
      },
      {
        "command": "aws sts get-caller-identity --output json",
        "note": "Validate current identity and role assumption"
      },
      {
        "command": "aws iam get-account-summary --output json",
        "note": "Check account-level role and user statistics"
      }
    ]
  },
  "KSI-IAM-05": {
    "description": "Separate duties between users",
    "justification": "Validates a zero trust architecture by checking for a modern identity provider (Identity Center), network micro-segmentation, session-based credentials, and comprehensive logging.",
    "cli_commands": [
      {
        "command": "aws sso-admin list-instances --output json || echo '{\"Instances\": []}'",
        "note": "CRITICAL: Check for an active IAM Identity Center instance."
      },
      {
        "command": "aws identitystore list-users --identity-store-id $(aws sso-admin list-instances --query 'Instances[0].IdentityStoreId' --output text 2>/dev/null) --output json || echo '{\"Users\": []}'",
        "note": "Check Identity Center users to verify federation."
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate CloudTrail configuration for comprehensive monitoring."
      },
      {
        "command": "aws cloudtrail get-trail-status --name $(aws cloudtrail describe-trails --query 'trailList[0].TrailARN' --output text 2>/dev/null || echo 'none') --output json || echo '{\"IsLogging\": false}'",
        "note": "CRITICAL: Check if the primary CloudTrail is actively logging using its full ARN."
      },
      {
        "command": "aws ec2 describe-security-groups --output json",
        "note": "Validate network micro-segmentation by analyzing security group rules."
      },
      {
        "command": "aws ec2 describe-vpc-endpoints --output json",
        "note": "Check for VPC endpoints to ensure secure, private communications."
      },
      {
        "command": "aws sts get-caller-identity --output json",
        "note": "Verify the use of temporary, session-based credentials."
      }
    ]
  },
  "KSI-IAM-06": {
    "description": "Implement fine-grained automated actions on security events related to authentication and access control",
    "justification": "Validates a multi-layered automated response system, including threat detection (GuardDuty, Security Hub), event triggering (EventBridge), and automated actions (Lambda, Alarms).",
    "cli_commands": [
      {
        "command": "aws guardduty list-detectors --output json",
        "note": "Validates the presence of an automated threat detection service."
      },
      {
        "command": "aws securityhub describe-hub --output json",
        "note": "Checks for a centralized hub for managing security events."
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Checks for EventBridge rules that trigger actions on security events."
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Identifies custom Lambda functions designed for automated security responses."
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Checks for CloudWatch alarms that monitor for and notify on security events."
      }
    ]
  },
  "KSI-IAM-07": {
    "description": "Implement a consistent identity management process",
    "justification": "Validates comprehensive identity lifecycle management from basic IAM to enterprise-grade identity governance and automated provisioning",
    "cli_commands": [
      {
        "command": "aws iam list-roles --output json",
        "note": "Check IAM roles for consistent identity management"
      },
      {
        "command": "aws iam list-users --output json",
        "note": "Validate IAM users and lifecycle management"
      },
      {
        "command": "aws iam list-policies --scope Local --output json",
        "note": "Check custom IAM policies for consistent identity governance"
      }
    ]
  },
  "KSI-MLA-01": {
    "description": "Implement end-to-end logging to capture security events",
    "justification": "Validates a comprehensive, multi-layered logging and SIEM strategy, including collection, integrity, storage, and analysis.",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Check CloudTrail configuration for log collection and integrity."
      },
      {
        "command": "aws cloudtrail get-trail-status --name $(aws cloudtrail describe-trails --query 'trailList[0].TrailARN' --output text 2>/dev/null || echo 'none') --output json || echo '{\"IsLogging\": false}'",
        "note": "CRITICAL: Check if the primary organization trail is actively logging."
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Validate centralized log storage and retention policies in CloudWatch."
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check for automated log analysis and alerting on security events."
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Validate use of KMS for log encryption at rest."
      },
      {
        "command": "aws securityhub get-findings --max-results 20 --output json",
        "note": "Validate Security Hub for advanced, aggregated security findings."
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Confirm an enterprise governance structure for centralized logging."
      }
    ]
  },
  "KSI-MLA-02": {
    "description": "Regularly review and audit logs",
    "justification": "Validates comprehensive log review from basic notification-driven processes to enterprise-grade automated analysis and compliance governance",
    "cli_commands": [
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for automated log review"
      },
      {
        "command": "aws logs describe-metric-filters --output json",
        "note": "Validate metric filters for log pattern analysis"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Check SNS topics for log review notifications"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Analyze log retention policies and compliance"
      },
      {
        "command": "aws cloudtrail lookup-events --max-items 10 --output json",
        "note": "Check recent audit events for review validation"
      },
      {
        "command": "aws securityhub get-insights --output json",
        "note": "Validate advanced log correlation and security analytics"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check custom log processing and automated review functions"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate enterprise-wide centralized log review capabilities"
      }
    ]
  },
  "KSI-MLA-03": {
    "description": "Rapidly detect and remediate or mitigate vulnerabilities",
    "justification": "Validates comprehensive vulnerability detection from basic security monitoring to enterprise-grade automated remediation and threat intelligence",
    "cli_commands": [
      {
        "command": "aws securityhub get-enabled-standards --region us-east-1 --output json",
        "note": "Check Security Hub enabled standards for vulnerability detection"
      },
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Validate Inspector for continuous vulnerability scanning"
      },
      {
        "command": "aws securityhub get-findings --filters '{\"RecordState\":[{\"Value\":\"ACTIVE\",\"Comparison\":\"EQUALS\"}],\"WorkflowStatus\":[{\"Value\":\"NEW\",\"Comparison\":\"EQUALS\"}]}' --max-results 50 --output json",
        "note": "Check active Security Hub findings for rapid detection"
      },
      {
        "command": "aws ssm describe-patch-baselines --output json",
        "note": "Validate patch baselines for automated vulnerability remediation"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions for automated remediation workflows"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Validate CloudWatch alarms for vulnerability detection alerts"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check organization-wide vulnerability management policies"
      }
    ]
  },
  "KSI-MLA-05": {
    "description": "Use change management tools to enforce, track and report configuration changes",
    "justification": "Validates comprehensive change tracking from basic CloudTrail to enterprise-grade automated governance and compliance reporting",
    "cli_commands": [
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Check CloudFormation stacks for infrastructure change management"
      },
      {
        "command": "aws cloudformation describe-stacks --output json",
        "note": "Validate stack details for change tracking and history"
      },
      {
        "command": "aws ssm describe-parameters --max-results 50 --output json",
        "note": "Check SSM parameters for configuration change management"
      },
      {
        "command": "aws codebuild list-projects --output json",
        "note": "Validate CodeBuild for automated change deployment pipelines"
      },
      {
        "command": "aws codepipeline list-pipelines --output json",
        "note": "Check CodePipeline for change management automation"
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=ResourceType,AttributeValue=AWS::CloudFormation::Stack --max-items 20 --output json",
        "note": "Validate CloudTrail audit logs for configuration changes"
      },
      {
        "command": "aws resourcegroupstaggingapi get-resources --resource-type-filters cloudformation --output json",
        "note": "Check resource tagging for change management governance"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide change management policies"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Check Service Catalog for standardized change templates"
      }
    ]
  },
  "KSI-MLA-07": {
    "description": "Use log aggregation services that accept logs from CSO-provided services",
    "justification": "Validates comprehensive log aggregation from basic CloudWatch to enterprise-grade centralized SIEM and cross-account log collection",
    "cli_commands": [
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Check CloudWatch Log Groups for centralized log aggregation"
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate CloudTrail for organization-wide audit log aggregation"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Check CloudWatch alarms for aggregated log monitoring"
      }
    ]
  },
  "KSI-MLA-08": {
    "description": "Protect audit logs to support after-the-fact investigations",
    "justification": "Validates a multi-layered log protection strategy, including log integrity (CloudTrail), long-term retention and encryption (CloudWatch, KMS), and restricted access (IAM RBAC).",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Validate the integrity and encryption of the primary audit log source (CloudTrail)."
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Check CloudWatch Logs for evidence of long-term, compliance-grade retention."
      },
      {
        "command": "aws iam list-roles --output json",
        "note": "Check for specialized IAM roles that enforce least privilege for log access."
      },
      {
        "command": "aws kms list-keys --output json",
        "note": "Verify that KMS keys are available for encrypting logs at rest."
      }
    ]
  },
  "KSI-CMT-01": {
    "description": "Document a change management policy for all system modifications",
    "justification": "Validates comprehensive change management documentation from basic policies to enterprise-grade automated change workflows and compliance tracking",
    "cli_commands": [
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Check CloudTrail for change audit logging and compliance"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Validate CloudWatch Logs for change management event tracking"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Check EventBridge rules for automated change workflows"
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Validate CloudWatch alarms for change monitoring"
      },
      {
        "command": "aws sns list-topics --output json",
        "note": "Check SNS topics for change notification workflows"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate Lambda functions for automated change management"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Check SSM for configuration management and change tracking"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide change management policies"
      }
    ]
  },
  "KSI-CMT-02": {
    "description": "Use self-service templates and image repositories for provisioning",
    "justification": "Validates comprehensive self-service provisioning from basic AMIs to enterprise-grade service catalogs and automated deployment templates",
    "cli_commands": [
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Check CloudFormation stacks for infrastructure templates"
      },
      {
        "command": "aws ec2 describe-instances --query 'Reservations[*].Instances[*].[InstanceId,ImageId,LaunchTime]' --output json",
        "note": "Validate EC2 instances using standardized AMIs"
      },
      {
        "command": "aws ec2 describe-launch-templates --output json",
        "note": "Check launch templates for self-service provisioning"
      },
      {
        "command": "aws autoscaling describe-auto-scaling-groups --output json",
        "note": "Validate auto-scaling using standardized templates"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions for serverless self-service deployment"
      },
      {
        "command": "aws deploy list-applications --output json",
        "note": "Validate CodeDeploy applications for automated deployment"
      },
      {
        "command": "aws ecr describe-repositories --output json",
        "note": "Check ECR repositories for container image templates"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Validate Service Catalog for self-service product templates"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check organization-wide standardized provisioning policies"
      }
    ]
  },
  "KSI-CMT-03": {
    "description": "Use CI/CD pipelines for deploying changes",
    "justification": "Validates comprehensive CI/CD implementation from basic CodePipeline to enterprise-grade GitOps and automated deployment validation",
    "cli_commands": [
      {
        "command": "aws codebuild list-projects --output json",
        "note": "Check CodeBuild projects for CI/CD build automation"
      },
      {
        "command": "aws codepipeline list-pipelines --output json",
        "note": "Validate CodePipeline for automated deployment workflows"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions for serverless CI/CD automation"
      },
      {
        "command": "aws events list-rules --output json",
        "note": "Validate EventBridge rules for CI/CD event-driven automation"
      },
      {
        "command": "aws cloudformation validate-template --template-url https://s3.amazonaws.com/cloudformation-templates-us-east-1/WordPress_Single_Instance.template --output json || echo '{\"Parameters\": []}'",
        "note": "Check CloudFormation template validation in CI/CD"
      },
      {
        "command": "aws servicecatalog search-products --output json",
        "note": "Validate Service Catalog for standardized CI/CD templates"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Check organization-wide CI/CD governance policies"
      },
      {
        "command": "aws codebuild batch-get-builds --ids $(aws codebuild list-builds --max-items 1 --query 'ids[0]' --output text 2>/dev/null || echo 'none') --output json 2>/dev/null || echo '{\"builds\": []}'",
        "note": "Validate recent CI/CD build execution details"
      },
      {
        "command": "PIPELINE_NAME=$(aws codepipeline list-pipelines --query 'pipelines[0].name' --output text 2>/dev/null || echo 'none'); if [ \"$PIPELINE_NAME\" != \"none\" ]; then EXEC_ID=$(aws codepipeline list-pipeline-executions --pipeline-name \"$PIPELINE_NAME\" --max-items 1 --query 'pipelineExecutionSummaries[0].pipelineExecutionId' --output text 2>/dev/null || echo 'none'); if [ \"$EXEC_ID\" != \"none\" ]; then aws codepipeline get-pipeline-execution --pipeline-name \"$PIPELINE_NAME\" --pipeline-execution-id \"$EXEC_ID\" --output json; else echo '{\"pipelineExecution\": null}'; fi; else echo '{\"pipelineExecution\": null}'; fi",
        "note": "Check recent pipeline execution for deployment validation"
      }
    ]
  },
  "KSI-CMT-04": {
  "description": "Document and consistently follow change management",
  "justification": "Verifies that a change management procedure is documented and that the process is being followed by checking for stored Terraform plan files in S3.",
  "cli_commands": [
    {
      "command": "aws codecommit get-file --repository-name security-governance --file-path procedures/change-management-procedure.md",
      "note": "Check for the existence of the change management procedure document."
    },
    {
      "command": "aws s3 ls s3://mks-states/plans/ --recursive",
      "note": "Check S3 for stored Terraform plans as evidence that the change process is followed."
    }
    ]
  },
  "KSI-CMT-05": {
  "description": "Evaluate risk and potential impact of any change (Hybrid Validation)",
  "justification": "Performs a hybrid check: 1) A live call to AWS CodeCommit to verify the risk assessment document exists. 2) A live call to S3 to verify Terraform plans are being stored as evidence of impact analysis.",
  "cli_commands": [
    {
      "command": "aws codecommit get-file --repository-name security-governance --commit-specifier main --file-path procedures/change-risk-assessment.md",
      "note": "Live check for the risk assessment procedure in CodeCommit."
    },
    {
      "command": "aws s3 ls s3://mks-states/plans/ --recursive",
      "note": "Check S3 for stored Terraform plans as evidence of impact assessment."
    }
    ]
  },
  "KSI-PIY-01": {
    "description": "Maintain an inventory of authorized users",
    "justification": "Validates comprehensive user inventory from basic IAM list to enterprise-grade identity lifecycle management and automated discovery",
    "cli_commands": [
      {
        "command": "aws ec2 describe-instances --output json",
        "note": "Check EC2 instances for system resource inventory"
      },
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Validate RDS database inventory"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions inventory"
      },
      {
        "command": "aws s3api list-buckets --output json",
        "note": "Validate S3 bucket inventory"
      },
      {
        "command": "aws elbv2 describe-load-balancers --output json",
        "note": "Check load balancer inventory"
      },
      {
        "command": "aws route53 list-hosted-zones --output json",
        "note": "Validate Route53 DNS inventory"
      },
      {
        "command": "aws cloudformation list-stacks --stack-status-filter CREATE_COMPLETE UPDATE_COMPLETE --output json",
        "note": "Check CloudFormation stack inventory"
      },
      {
        "command": "aws s3 ls s3://mksfr-sftp-bucket/inventory/ || echo 'No inventory files'",
        "note": "Validate automated inventory collection in S3"
      },
      {
        "command": "aws lambda get-function --function-name aws_inventory --output json || echo '{\"Configuration\": null}'",
        "note": "Check automated inventory Lambda function"
      }
    ]
  },
   "KSI-PIY-02": {
    "description": "Document the security objectives and requirements for EACH information resource",
    "justification": "RFC-0014 Phase Two: Validates per-component security documentation in version-controlled CodeCommit. 'Each resource' means system components (frontend, API, database), NOT per-AWS-service-type.",
    "cli_commands": [
      {
        "command": "aws codecommit get-repository --repository-name security-governance --output json",
        "note": "Verify security-governance repository exists"
      },
      {
        "command": "aws codecommit get-folder --repository-name security-governance --folder-path policies/security-objectives/ --output json",
        "note": "List per-component security documentation (expected: 3-5 system components)"
      },
      {
        "command": "aws codecommit list-approval-rule-templates --output json",
        "note": "Validate PR approval workflow configured"
      },
      {
        "command": "aws codecommit get-differences --repository-name security-governance --after-commit-specifier refs/heads/main --output json",
        "note": "Check recent documentation updates"
      },
      {
        "command": "aws codecommit get-branch --repository-name security-governance --branch-name main --output json",
        "note": "Validate main branch configuration"
      }
    ]
  },
  "KSI-PIY-03": {
    "description": "Maintain a vulnerability disclosure program",
    "justification": "Validates vulnerability disclosure program with submission procedures, response timelines, and public contact information.",
    "cli_commands": [
      {
        "command": "aws codecommit get-file --repository-name security-governance --file-path policies/vulnerability-disclosure-policy.md --output json",
        "note": "Retrieve vulnerability disclosure policy document"
      },
      {
        "command": "aws codecommit get-folder --repository-name security-governance --folder-path policies/ --output json",
        "note": "List supporting VDP documentation"
      },
      {
        "command": "aws codecommit get-differences --repository-name security-governance --after-commit-specifier refs/heads/main --output json",
        "note": "Check VDP maintenance and updates"
      }
    ]
  },
  "KSI-PIY-04": {
    "description": "Maintain an inventory of authorized software",
    "justification": "Validates comprehensive authorized software management from basic allow-lists to enterprise-grade application control and compliance tracking",
    "cli_commands": [
      {
        "command": "aws codebuild list-projects --output json",
        "note": "Check CodeBuild for authorized software deployment pipelines"
      },
      {
        "command": "aws codepipeline list-pipelines --output json",
        "note": "Validate CodePipeline for authorized software deployment"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check Lambda functions for authorized serverless software"
      },
      {
        "command": "aws organizations describe-organization --output json",
        "note": "Validate organization-wide authorized software policies"
      }
    ]
  },
"KSI-PIY-05": {
    "description": "Document methods used to evaluate information resource implementations",
    "justification": "Validates the evaluation methodology document, including assessment procedures and references to automated tools.",
    "cli_commands": [
      {
        "command": "aws codecommit get-file --repository-name security-governance --file-path policies/evaluation-methodology.md --output json",
        "note": "Retrieve the correct evaluation methodology document from the 'policies' directory."
      },
      {
        "command": "aws codecommit get-folder --repository-name security-governance --folder-path procedures/ --output json",
        "note": "List any supporting evaluation and assessment procedures."
      },
      {
        "command": "aws codecommit get-differences --repository-name security-governance --after-commit-specifier refs/heads/main --output json",
        "note": "Check for recent updates to the methodology."
      }
    ]
  },
  "KSI-PIY-06": {
    "description": "Have dedicated security staff and budget with executive support",
    "justification": "Validates organizational commitment to security through active engagement, tooling investment, and deployed monitoring capabilities.",
    "cli_commands": [
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=ConsoleLogin --start-time $(date -u -d '30 days ago' '+%Y-%m-%dT%H:%M:%S') --max-items 50 --output json",
        "note": "Measure active security team engagement via console logins."
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=PutConfigRule --start-time $(date -u -d '90 days ago' '+%Y-%m-%dT%H:%M:%S') --max-items 50 --output json",
        "note": "Measure security engineering activity via Config rule deployments."
      },
      {
        "command": "aws cloudtrail lookup-events --lookup-attributes AttributeKey=EventName,AttributeValue=PutMetricAlarm --start-time $(date -u -d '90 days ago' '+%Y-%m-%dT%H:%M:%S') --max-items 50 --output json",
        "note": "Measure security engineering activity via CloudWatch alarm deployments."
      },
      {
        "command": "aws configservice describe-config-rules --output json",
        "note": "Count the total number of deployed Config rules."
      },
      {
        "command": "aws cloudwatch describe-alarms --output json",
        "note": "Get all CloudWatch alarms for security analysis."
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Get all Lambda functions for security analysis."
      }
  ]
    },
  "KSI-PIY-07": {
    "description": "Document risk management decisions for software supply chain security",
    "justification": "Validates the supply chain risk policy's content, its maintenance history, and the existence of a formal approval workflow.",
    "cli_commands": [
      {
        "command": "aws codecommit get-file --repository-name security-governance --file-path policies/supply-chain-risk-management.md --output json",
        "note": "Retrieve the supply chain risk management policy to analyze its content."
      },
      {
        "command": "aws codecommit get-differences --repository-name security-governance --after-commit-specifier refs/heads/main --output json",
        "note": "Check the commit history for an audit trail of policy updates."
      },
      {
        "command": "aws codecommit list-approval-rule-templates --output json",
        "note": "Verify that a formal approval process is configured for the repository."
      }

    ]
  },
  "KSI-TPR-01": {
    "description": "Document the cloud service provider (CSP) in the system security policy",
    "justification": "Validates CSP documentation from basic AWS account details to enterprise-grade shared responsibility model and service integration policies",
    "cli_commands": [
      {
        "command": "aws lambda list-functions --query 'Functions[?contains(FunctionName, `policy`) || contains(FunctionName, `compliance`)]' --output json",
        "note": "Check for policy management Lambda functions"
      },
      {
        "command": "aws logs describe-log-groups --log-group-name-prefix '/aws/lambda/lms-policy' --output json",
        "note": "Validate policy service logging for documentation tracking"
      },
      {
        "command": "aws ssm get-parameter --name '/lms-compliance/policies' --output json || echo '{\"Parameter\": null}'",
        "note": "Check SSM Parameter Store for centralized policy storage"
      }
    ]
  },
 "KSI-TPR-03": {
  "description": "Identify and prioritize mitigation of potential supply chain risks",
  "justification": "Validates the supply chain risk management policy's existence, its maintenance history, and the existence of a formal approval workflow.",
  "cli_commands": [
    {
      "command": "aws codecommit get-file --repository-name security-governance --file-path policies/supply-chain-risk-management.md",
      "note": "Retrieve the supply chain risk management policy from CodeCommit to verify its existence and size."
    },
    {
      "command": "aws codecommit list-approval-rule-templates --output json",
      "note": "Validate that a formal approval rule process is configured for the repository."
    },
    {
      "command": "aws codecommit get-differences --repository-name security-governance --after-commit-specifier refs/heads/main --output json",
      "note": "Check the commit history for an audit trail of recent policy updates."
    }
    ]
  },
  "KSI-TPR-04": {
    "description": "Conduct vulnerability scans for applications and operating systems",
    "justification": "Validates comprehensive vulnerability scanning from basic Inspector to enterprise-grade continuous scanning and automated remediation",
    "cli_commands": [
      {
        "command": "aws inspector2 get-configuration --output json",
        "note": "Check Inspector configuration for vulnerability scanning"
      },
      {
        "command": "aws inspector2 list-findings --filter-criteria '{\"componentType\":[{\"comparison\":\"EQUALS\",\"value\":\"OPERATING_SYSTEM\"}]}' --max-results 50 --output json",
        "note": "Validate OS vulnerability findings from Inspector"
      },
      {
        "command": "aws inspector2 list-findings --filter-criteria '{\"componentType\":[{\"comparison\":\"EQUALS\",\"value\":\"APPLICATION\"}]}' --max-results 50 --output json",
        "note": "Check application vulnerability findings from Inspector"
      },
      {
        "command": "aws inspector2 list-findings --filter-criteria '{\"findingStatus\":[{\"comparison\":\"EQUALS\",\"value\":\"ACTIVE\"}]}' --max-results 100 --output json",
        "note": "Validate active vulnerability findings requiring remediation"
      },
      {
        "command": "aws inspector2 list-coverage --filter-criteria '{\"resourceType\":[{\"comparison\":\"EQUALS\",\"value\":\"AWS_EC2_INSTANCE\"}]}' --max-results 100 --output json",
        "note": "Check Inspector coverage for EC2 instances"
      },
      {
        "command": "aws ssm describe-instance-information --output json",
        "note": "Validate SSM agent deployment for vulnerability management"
      }
    ]
  },
  "KSI-CED-01": {
    "description": "Provide role-based security training for personnel",
    "justification": "Validates role-based security training from basic awareness to enterprise-grade continuous education and compliance tracking",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Manual review of training records, completion certificates, and role-based security education documentation"
      }
    ]
  },
  "KSI-CED-02": {
    "description": "Provide specialized security training for privileged users",
    "justification": "Validates specialized security training from basic privileged user awareness to enterprise-grade advanced threat training and certification tracking",
    "cli_commands": [
      {
        "command": "evidence_check",
        "note": "Manual review of privileged user training records, advanced security certifications, and specialized training documentation"
      }
    ]
  },
  "KSI-CED-03": {
    "description": "Provide security awareness training on risks from social engineering and other attacks",
    "justification": "Validates security awareness training from basic phishing tests to enterprise-grade continuous awareness programs and behavior analytics",
    "cli_commands": [
      {
        "command": "aws lambda list-functions --output json",
        "note": "Check for security awareness automation functions"
      },
      {
        "command": "evidence_check",
        "note": "Manual review of security awareness training records, phishing simulation results, and social engineering prevention documentation"
      }
    ]
  },
  "KSI-RPL-01": {
    "description": "Establish a recovery time objective (RTO) and recovery point objective (RPO) for the system",
    "justification": "Validates RTO/RPO definition from basic backup schedules to enterprise-grade disaster recovery planning and business continuity governance",
    "cli_commands": [
      {
        "command": "aws rds describe-db-instances --output json",
        "note": "Check RDS backup configurations for RPO compliance"
      },
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Validate AWS Backup plans for RTO/RPO objectives"
      },
      {
        "command": "aws ssm get-parameter --name '/backup/rto-objectives' --query 'Parameter.Value' --output text || echo 'Not configured'",
        "note": "Check SSM Parameter Store for documented RTO objectives"
      },
      {
        "command": "aws ssm get-parameter --name '/backup/rpo-objectives' --query 'Parameter.Value' --output text || echo 'Not configured'",
        "note": "Validate SSM Parameter Store for documented RPO objectives"
      },
      {
        "command": "aws backup describe-backup-vault --backup-vault-name default --output json || echo '{\"BackupVault\": null}'",
        "note": "Check backup vault configuration for recovery capabilities"
      },
      {
        "command": "PLAN_ID=$(aws backup list-backup-plans --query 'BackupPlansList[0].BackupPlanId' --output text 2>/dev/null || echo 'none'); if [ \"$PLAN_ID\" != \"none\" ]; then aws backup list-backup-selections --backup-plan-id \"$PLAN_ID\" --output json; else echo '{\"BackupSelectionsList\": []}'; fi",
        "note": "Validate backup plan resource selections for comprehensive coverage"
      }
    ]
  },
  "KSI-RPL-02": {
    "description": "Develop and maintain a recovery plan that aligns with the defined recovery objectives",
    "justification": "Validates that a recovery plan is implemented and maintained as code via AWS Backup plans, vaults, and evidence of recent execution.",
    "cli_commands": [
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Validates that recovery plans are defined and have been recently executed."
      },
      {
        "command": "aws backup list-backup-vaults --output json",
        "note": "Checks for secure, encrypted backup vaults to store recovery points."
      },
      {
        "command": "aws ec2 describe-snapshots --owner-ids self --max-results 100 --output json",
        "note": "Verifies the existence of recovery points (EBS snapshots)."
      }
    ]
  },
  "KSI-RPL-03": {
    "description": "Back up information regularly per the recovery point objective",
    "justification": "Validates comprehensive backup execution from basic scheduled backups to enterprise-grade continuous data protection and multi-region replication",
    "cli_commands": [
      {
        "command": "aws backup list-backup-plans --output json",
        "note": "Check AWS Backup plans for regular backup schedules"
      },
      {
        "command": "PLAN_ID=$(aws backup list-backup-plans --query 'BackupPlansList[0].BackupPlanId' --output text 2>/dev/null || echo 'none'); if [ \"$PLAN_ID\" != \"none\" ]; then aws backup get-backup-plan --backup-plan-id \"$PLAN_ID\" --output json; else echo '{\"BackupPlan\": null}'; fi",
        "note": "Validate backup plan schedules and retention policies"
      },
      {
        "command": "aws backup list-backup-jobs --by-state COMPLETED --max-results 50 --output json",
        "note": "Check recent completed backup jobs for RPO compliance"
      },
      {
        "command": "aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,PreferredBackupWindow,BackupRetentionPeriod]' --output json",
        "note": "Validate RDS automated backup configurations"
      },
      {
        "command": "aws ec2 describe-snapshots --owner-ids self --output json",
        "note": "Check EBS snapshots for volume backup coverage"
      }
    ]
  },
  "KSI-RPL-04": {
    "description": "Test recovery procedures regularly",
    "justification": "Validates comprehensive recovery testing from basic restore validation to enterprise-grade chaos engineering and automated DR drills",
    "cli_commands": [
      {
        "command": "aws backup list-restore-jobs --max-results 20 --output json",
        "note": "Check restore job history for recovery testing validation"
      },
      {
        "command": "aws backup list-backup-jobs --by-state COMPLETED --by-created-after $(date -u -d '30 days ago' +%Y-%m-%dT%H:%M:%SZ 2>/dev/null || date -u -v-30d +%Y-%m-%dT%H:%M:%SZ) --max-results 50 --output json",
        "note": "Validate recent backup jobs for recovery readiness"
      },
      {
        "command": "aws rds describe-db-instances --query 'DBInstances[*].[DBInstanceIdentifier,LatestRestorableTime]' --output json",
        "note": "Check RDS latest restorable time for point-in-time recovery testing"
      },
      {
        "command": "RESTORE_JOB_ID=$(aws backup list-restore-jobs --max-results 1 --query 'RestoreJobs[0].RestoreJobId' --output text 2>/dev/null || echo 'none'); if [ \"$RESTORE_JOB_ID\" != \"none\" ]; then aws backup describe-restore-job --restore-job-id \"$RESTORE_JOB_ID\" --output json; else echo '{\"RestoreJob\": null}'; fi",
        "note": "Validate recent restore job details for recovery testing documentation"
      },
      {
        "command": "INSTANCE_ID=$(aws ec2 describe-instances --filters 'Name=instance-state-name,Values=running' --query 'Reservations[0].Instances[0].InstanceId' --output text 2>/dev/null || echo 'none'); if [ \"$INSTANCE_ID\" != \"none\" ]; then aws ssm describe-instance-associations --instance-id \"$INSTANCE_ID\" --output json 2>/dev/null || echo '{\"Associations\": []}'; else echo '{\"Associations\": []}'; fi",
        "note": "Check SSM associations for automated recovery testing"
      },
      {
        "command": "aws lambda invoke --function-name automated-recovery-test --payload '{}' /tmp/recovery-test-result.json 2>&1 || echo 'No automated recovery test function'",
        "note": "Validate automated recovery testing Lambda function"
      },
      {
        "command": "aws ssm get-parameter --name '/recovery/last-test-date' --query 'Parameter.Value' --output text || echo 'Not configured'",
        "note": "Check SSM Parameter Store for documented recovery test dates"
      }
    ]
  },
  "KSI-INR-01": {
    "description": "Respond to incidents according to FedRAMP requirements and cloud service provider policies",
    "justification": "Validates incident response procedures in version-controlled repository with FedRAMP-compliant notification timelines and AWS-specific containment actions.",
    "cli_commands": [
      {
        "command": "aws codecommit get-repository --repository-name security-governance --output json",
        "note": "Verify security-governance repository exists"
      },
      {
        "command": "aws codecommit get-file --repository-name security-governance --file-path procedures/incident-response-plan.md --output json",
        "note": "Retrieve incident response plan document"
      },
      {
        "command": "aws codecommit get-folder --repository-name security-governance --folder-path procedures/ --output json",
        "note": "List incident response procedures"
      },
      {
        "command": "aws securityhub get-findings --max-results 50 --output json",
        "note": "Verify Security Hub findings tracking"
      },
      {
        "command": "aws guardduty list-detectors --output json",
        "note": "Verify GuardDuty threat detection enabled"
      },
      {
        "command": "aws cloudtrail describe-trails --output json",
        "note": "Verify CloudTrail audit logging for incident investigation"
      },
      {
        "command": "aws codecommit get-differences --repository-name security-governance --after-commit-specifier refs/heads/main --output json",
        "note": "Check incident response plan maintenance"
      }
    ]
  },
  "KSI-INR-02": {
    "description": "Establish an insider threat program",
    "justification": "Validates insider threat detection from basic access monitoring to enterprise-grade behavioral analytics and automated threat detection",
    "cli_commands": [
      {
        "command": "aws events list-rules --output json",
        "note": "Check EventBridge rules for insider threat detection automation"
      },
      {
        "command": "aws logs describe-log-groups --output json",
        "note": "Validate CloudWatch Logs for insider threat monitoring"
      },
      {
        "command": "aws guardduty list-detectors --output json",
        "note": "Check GuardDuty for insider threat detection capabilities"
      },
      {
        "command": "aws securityhub get-findings --max-results 5 --output json",
        "note": "Validate Security Hub findings for insider threat alerts"
      },
      {
        "command": "evidence_check",
        "note": "Manual review of insider threat program documentation, detection rules, and response procedures"
      }
    ]
  },
  "KSI-INR-03": {
    "description": "Implement automated incident response procedures",
    "justification": "Validates automated incident response from basic CloudWatch alarms to enterprise-grade SOAR platforms and intelligent threat response",
    "cli_commands": [
      {
        "command": "aws securityhub get-findings --max-results 50 --output json",
        "note": "Check Security Hub for incident detection and automated response triggers"
      },
      {
        "command": "aws lambda list-functions --output json",
        "note": "Validate Lambda functions for automated incident response actions"
      },
      {
        "command": "aws securityhub describe-standards --output json",
        "note": "Check Security Hub standards for automated compliance monitoring"
      },
      {
        "command": "aws securityhub get-enabled-standards --output json",
        "note": "Validate enabled Security Hub standards for continuous monitoring"
      }
    ]
  }
}

